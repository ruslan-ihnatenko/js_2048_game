{"mappings":"C,A,WUAA,SAAS,EAAqB,CAAG,CAAE,CAAG,EAC9B,CAAA,AAAO,MAAP,GAAe,EAAM,EAAI,MAAM,AAAN,GAAQ,CAAA,EAAM,EAAI,MAAM,AAAN,EAE/C,IAAK,IAAI,EAAI,EAAG,EAAO,AAAI,MAAM,GAAM,EAAI,EAAK,IAAK,CAAI,CAAC,EAAE,CAAG,CAAG,CAAC,EAAE,CAErE,OAAO,CACX,CDJA,SAAS,EAA+B,CAAC,CAAE,CAAM,EAC7C,GAAK,GACL,GAAI,AAAa,UAAb,OAAO,EAAgB,OAAO,AAAA,EAAqB,EAAG,GAE1D,IAAI,EAAI,OAAO,SAAS,CAAC,QAAQ,CAAC,IAAI,CAAC,GAAG,KAAK,CAAC,EAAG,IAGnD,GADU,WAAN,GAAkB,EAAE,WAAW,EAAE,CAAA,EAAI,EAAE,WAAW,CAAC,IAAI,AAAJ,EACnD,AAAM,QAAN,GAAe,AAAM,QAAN,EAAa,OAAO,MAAM,IAAI,CAAC,GAClD,GAAI,AAAM,cAAN,GAAqB,2CAA2C,IAAI,CAAC,GAAI,OAAO,AAAA,EAAqB,EAAG,GAChH,CRTA,IAAM,EAAO,GCFb,CAAA,eEWoC,EFX9B,SAAA,IAOF,IAAA,EAAA,UAAA,MAAA,CAAA,GAAA,AAAA,KAAA,IAAA,SAAA,CAAA,EAAA,CAAA,SAAA,CAAA,EAAA,CAAe,CACb,CAAC,EAAG,EAAG,EAAG,EAAE,CACZ,CAAC,EAAG,EAAG,EAAG,EAAE,CACZ,CAAC,EAAG,EAAG,EAAG,EAAE,CACZ,CAAC,EAAG,EAAG,EAAG,EAAE,CACb,EAZC,ACAN,SAA2B,CAAQ,CAAE,CAAW,EAC5C,GAAI,CAAE,CAAA,aAAoB,CAAA,EAAc,MAAM,AAAI,UAAU,oCAChE,EDFM,IAAA,CAAA,GAcF,IAAI,CAAC,KAAK,CAAG,EACb,IAAI,CAAC,KAAK,CAAG,EACb,IAAI,CAAC,MAAM,CAAG,M,CAhBZ,OEW8B,EFX9B,C,CAsBJ,IAAA,QAAA,MAAA,WACE,IAAI,CAAC,MAAM,CAAG,UACd,IAAI,CAAC,aAAa,GAClB,IAAI,CAAC,aAAa,EACpB,C,E,CAKA,IAAA,UAAA,MAAA,WACE,IAAI,CAAC,KAAK,CAAG,CACX,CAAC,EAAG,EAAG,EAAG,EAAE,CACZ,CAAC,EAAG,EAAG,EAAG,EAAE,CACZ,CAAC,EAAG,EAAG,EAAG,EAAE,CACZ,CAAC,EAAG,EAAG,EAAG,EAAE,CACb,CACD,IAAI,CAAC,KAAK,CAAG,EACb,IAAI,CAAC,MAAM,CAAG,OACd,IAAI,CAAC,KAAK,EACZ,C,E,CAMA,IAAA,WAAA,MAAA,WACE,OAAO,IAAI,CAAC,KAAK,AACnB,C,E,CAMA,IAAA,WAAA,MAAA,WACE,OAAO,IAAI,CAAC,KAAK,AACnB,C,E,CAMA,IAAA,YAAA,MAAA,WACE,OAAO,IAAI,CAAC,MAAM,AACpB,C,E,CAKA,IAAA,gBAAA,MAAA,WAIE,IAAK,IAHC,EAAa,EAAE,CAGZ,EAAM,EAAG,EAAM,IAAI,CAAC,KAAK,CAAC,MAAM,CAAE,IACzC,IAAK,IAAI,EAAM,EAAG,EAAM,IAAI,CAAC,KAAK,CAAC,EAAI,CAAC,MAAM,CAAE,IACjB,IAAzB,IAAI,CAAC,KAAK,CAAC,EAAI,CAAC,EAAI,EACtB,EAAW,IAAI,CAAC,CAAC,EAAK,EAAI,EAKhC,GAAI,EAAW,MAAM,CAAG,EAAG,CACzB,IG9EoB,EH+ElB,EG9EG,ACNX,SAA2B,CAAG,EAC1B,GAAI,MAAM,OAAO,CAAC,GAAM,OAAO,CACnC,EDG0B,EH+ElB,CAAU,CAAC,KAAK,KAAK,CAAC,KAAK,MAAM,GAAK,EAAW,MAAM,EAAE,GG9E5B,AENrC,SAAkC,CAAG,CAAE,CAAC,EACpC,IAOI,EAAI,EAPJ,EAAK,AAAO,MAAP,EAAc,KAAO,AAAkB,aAAlB,OAAO,QAA0B,CAAG,CAAC,OAAO,QAAQ,CAAC,EAAI,CAAG,CAAC,aAAa,CAExG,GAAI,AAAM,MAAN,GAEJ,IAAI,EAAO,EAAE,CACT,EAAK,CAAA,EACL,EAAK,CAAA,EAGT,GAAI,CACA,IAAK,EAAK,EAAG,IAAI,CAAC,GAAM,CAAE,CAAA,EAAM,AAAA,CAAA,EAAK,EAAG,IAAI,EAAA,EAAI,IAAI,AAAJ,IAC5C,EAAK,IAAI,CAAC,EAAG,KAAK,EACT,ALuE4C,IKvE5C,EAAK,MAAM,EAF+B,EAAK,CAAA,GAIhE,CAAE,MAAO,EAAK,CACV,EAAK,CAAA,EACL,EAAK,CACT,QAAU,CACN,GAAI,CACK,GAAM,AAAgB,MAAhB,EAAG,MAAS,EAAU,EAAG,MAAS,EACjD,QAAU,CACN,GAAI,EAAI,MAAM,CAClB,CACJ,CAEA,OAAO,EACX,EFrB8D,EH8EG,IG9EQ,AAAA,EAA+B,EH8EvC,IG9EkD,AGNnH,WACI,MAAM,AAAI,UAAU,4IACxB,INiFa,EACL,CAAA,CAAA,EAAA,CADU,EACV,CADF,CAAA,EAAA,AAGA,CAAA,IAAI,CAAC,KAAK,CAAC,EAAI,CAAC,EAAI,CAAG,AAAgB,GAAhB,KAAK,MAAM,GAAW,EAAI,CACnD,CACF,C,E,CAKA,IAAA,WAAA,MAAA,WAGE,IAAK,IAFD,EAAQ,CAAA,EAEH,EAAM,EAAG,EAAM,IAAI,CAAC,KAAK,CAAC,MAAM,CAAE,IAAO,CAChD,IAAM,EAAS,IAAI,CAAC,aAAa,CAAC,IAAI,CAAC,KAAK,CAAC,EAAI,EAE7C,EAAO,QAAQ,KAAO,IAAI,CAAC,KAAK,CAAC,EAAI,CAAC,QAAQ,KAChD,EAAQ,CAAA,EACR,IAAI,CAAC,KAAK,CAAC,EAAI,CAAG,EAEtB,CAMA,OAJI,GACF,IAAI,CAAC,aAAa,GAGb,CACT,C,E,CAKA,IAAA,YAAA,MAAA,WAGE,IAAK,IAFD,EAAQ,CAAA,EAEH,EAAM,EAAG,EAAM,IAAI,CAAC,KAAK,CAAC,MAAM,CAAE,IAAO,CAChD,ISlHwB,ETkHlB,EAAe,ASjHhB,CAAA,ACJX,CAAA,SAA8B,CAAG,EAC7B,GAAI,MAAM,OAAO,CAAC,GAAM,OAAO,AAAA,EAAqB,EACxD,CAAA,EDC8B,ETkHA,IAAI,CAAC,KAAK,CAAC,EAAI,GSjHL,AENxC,SAA4B,CAAI,EAC5B,GAAI,AAAkB,aAAlB,OAAO,QAA0B,AAAyB,MAAzB,CAAI,CAAC,OAAO,QAAQ,CAAC,EAAY,AAAsB,MAAtB,CAAI,CAAC,aAAa,CACpF,OAAO,MAAM,IAAI,CAAC,EAE1B,EFE2D,IAAQ,AAAA,EAA+B,IAAQ,AGN1G,WACI,MAAM,AAAI,UAAU,uIACxB,GHII,ETiH2C,OAAO,GAC1C,EAAS,IAAI,CAAC,aAAa,CAAC,GAAa,OAAO,GAElD,EAAO,QAAQ,KAAO,IAAI,CAAC,KAAK,CAAC,EAAI,CAAC,QAAQ,KAChD,EAAQ,CAAA,EACR,IAAI,CAAC,KAAK,CAAC,EAAI,CAAG,EAEtB,CAMA,OAJI,GACF,IAAI,CAAC,aAAa,GAGb,CACT,C,E,CAKA,IAAA,SAAA,MAAA,WAGE,IAAK,IAFD,EAAQ,CAAA,EAEH,EAAM,EAAG,EAAM,EAAG,IASzB,IAAK,IARC,EAAS,CACb,IAAI,CAAC,KAAK,CAAC,EAAE,CAAC,EAAI,CAClB,IAAI,CAAC,KAAK,CAAC,EAAE,CAAC,EAAI,CAClB,IAAI,CAAC,KAAK,CAAC,EAAE,CAAC,EAAI,CAClB,IAAI,CAAC,KAAK,CAAC,EAAE,CAAC,EAAI,CACnB,CACK,EAAY,IAAI,CAAC,aAAa,CAAC,GAE5B,EAAM,EAAG,EAAM,EAAG,IACrB,IAAI,CAAC,KAAK,CAAC,EAAI,CAAC,EAAI,GAAK,CAAS,CAAC,EAAI,GACzC,EAAQ,CAAA,EACR,IAAI,CAAC,KAAK,CAAC,EAAI,CAAC,EAAI,CAAG,CAAS,CAAC,EAAI,EAS3C,OAJI,GACF,IAAI,CAAC,aAAa,GAGb,CACT,C,E,CAKA,IAAA,WAAA,MAAA,WAGE,IAAK,IAFD,EAAQ,CAAA,EAEH,EAAM,EAAG,EAAM,EAAG,IASzB,IAAK,IARC,EAAS,CACb,IAAI,CAAC,KAAK,CAAC,EAAE,CAAC,EAAI,CAClB,IAAI,CAAC,KAAK,CAAC,EAAE,CAAC,EAAI,CAClB,IAAI,CAAC,KAAK,CAAC,EAAE,CAAC,EAAI,CAClB,IAAI,CAAC,KAAK,CAAC,EAAE,CAAC,EAAI,CACnB,CAAC,OAAO,GACH,EAAY,IAAI,CAAC,aAAa,CAAC,GAAQ,OAAO,GAE3C,EAAM,EAAG,EAAM,EAAG,IACrB,IAAI,CAAC,KAAK,CAAC,EAAI,CAAC,EAAI,GAAK,CAAS,CAAC,EAAI,GACzC,EAAQ,CAAA,EACR,IAAI,CAAC,KAAK,CAAC,EAAI,CAAC,EAAI,CAAG,CAAS,CAAC,EAAI,EAS3C,OAJI,GACF,IAAI,CAAC,aAAa,GAGb,CACT,C,E,CAOA,IAAA,gBAAA,MAAA,SAAc,CAAK,EAIjB,IAAK,IAFC,EAAW,EAAM,MAAM,CAAC,SAAC,CAA/B,EAAwC,OAAA,AAAS,IAAT,C,GAE/B,EAAI,EAAG,EAAI,EAAS,MAAM,CAAG,EAAG,IACnC,CAAQ,CAAC,EAAE,GAAK,CAAQ,CAAC,EAAI,EAAE,GACjC,CAAQ,CAAC,EAAE,EAAI,EACf,IAAI,CAAC,KAAK,EAAI,CAAQ,CAAC,EAAE,CACzB,CAAQ,CAAC,EAAI,EAAE,CAAG,GANtB,IAWM,EAAS,EAAS,MAAM,CAAC,SAAC,CAAhC,EAAyC,OAAA,AAAS,IAAT,C,GACnC,EAAU,AAAI,MAAM,EAAI,EAAO,MAAM,EAAE,IAAI,CAAC,GAElD,OAAO,EAAO,MAAM,CAAC,EACvB,C,E,CAMA,IAAA,gBAAA,MAAA,WAEE,IAAK,IAAI,EAAM,EAAG,EAAM,EAAG,IACzB,IAAK,IAAI,EAAM,EAAG,EAAM,EAAG,IACzB,GAA6B,IAAzB,IAAI,CAAC,KAAK,CAAC,EAAI,CAAC,EAAI,EAKpB,EAAM,GAAK,IAAI,CAAC,KAAK,CAAC,EAAI,CAAC,EAAI,GAAK,IAAI,CAAC,KAAK,CAAC,EAAI,CAAC,EAAM,EAAE,EAI5D,EAAM,GAAK,IAAI,CAAC,KAAK,CAAC,EAAI,CAAC,EAAI,GAAK,IAAI,CAAC,KAAK,CAAC,EAAM,EAAE,CAAC,EAAI,CAR9D,MAAO,CAAA,EAeb,OAFA,IAAI,CAAC,MAAM,CAAG,OAEP,CAAA,CACT,C,E,CAKA,IAAA,oBAAA,MAAA,WACE,IAAK,IAAI,EAAM,EAAG,EAAM,EAAG,IACzB,IAAK,IAAI,EAAM,EAAG,EAAM,EAAG,IACzB,GAAI,AAAyB,OAAzB,IAAI,CAAC,KAAK,CAAC,EAAI,CAAC,EAAI,CAGtB,OAFA,IAAI,CAAC,MAAM,CAAG,MAEP,CAAA,EAKb,MAAO,CAAA,CACT,C,E,CEzPkB,AAZpB,SAA2B,CAAM,CAAE,CAAK,EACpC,IAAK,IAAI,EAAI,EAAG,EAAI,EAAM,MAAM,CAAE,IAAK,CACnC,IAAI,EAAa,CAAK,CAAC,EAAE,AACzB,CAAA,EAAW,UAAU,CAAG,EAAW,UAAU,EAAI,CAAA,EACjD,EAAW,YAAY,CAAG,CAAA,EAEtB,UAAW,GAAY,CAAA,EAAW,QAAQ,CAAG,CAAA,CAAjD,EAEA,OAAO,cAAc,CAAC,EAAQ,EAAW,GAAG,CAAE,EAClD,CACJ,EAEsC,AFZhC,EEY4C,SAAS,CAAE,GFZvD,C,G,EDKA,EAAY,SAAS,aAAa,CAAC,eACnC,EAAe,SAAS,aAAa,CAAC,eACtC,EAAc,SAAS,aAAa,CAAC,UACrC,EAAmB,SAAS,aAAa,CAAC,sBAG5C,EAAc,EACd,EAAc,EACd,EAAY,EACZ,EAAY,EAmDhB,SAAS,IACP,IAEI,EAAK,iBAAiB,GACxB,EAAY,kCAAyB,OAC5B,EAAK,aAAa,IAC3B,EAAY,4CAAmC,OAEnD,CA0BA,SAAS,IACP,IAAM,EAAQ,EAAK,QAAQ,GACrB,EAAO,EAAU,gBAAgB,CAAC,cAExC,EAAM,OAAO,CAAC,SAAC,CAAA,CAAK,CAApB,EACE,IAAM,EAAQ,CAAI,CAAC,EAAS,CAAC,gBAAgB,CAAC,eAE9C,EAAI,OAAO,CAAC,SAAC,CAAA,CAAW,CAAxB,EACE,IAAM,EAAO,CAAK,CAAC,EAAS,AAE5B,CAAA,EAAK,WAAW,CAAG,AAAc,IAAd,EAAkB,EAAY,GAUrD,AAToB,EASf,SAAS,CAAG,aAEH,IAXY,GAYxB,AAZkB,EAYb,SAAS,CAAC,GAAG,CAAE,eAAoB,MAAA,CAZhB,GACxB,EACF,GAEA,EAAa,WAAW,CAAG,EAAK,QAAQ,EAC1C,CAoBA,SAAS,EAAY,CAAI,CAAE,CAAI,EAC7B,EACG,gBAAgB,CAAC,YACjB,OAAO,CAAC,SAAC,CAFZ,EAEoB,OAAA,EAAI,SAAS,CAAC,GAAG,CAAC,S,GAEtC,IAAM,EAAiB,EAAiB,aAAa,CAAE,YAAgB,MAAA,CAAL,GAElE,CAAA,EAAe,WAAW,CAAG,EAC7B,EAAe,SAAS,CAAC,MAAM,CAAC,SAClC,CA/HA,SAAS,gBAAgB,CAAC,aAAc,SAAC,CAAzC,EACE,EAAc,EAAM,OAAO,CAAC,EAAE,CAAC,OAAO,CACtC,EAAc,EAAM,OAAO,CAAC,EAAE,CAAC,OAAO,AACxC,GAGA,SAAS,gBAAgB,CAAC,YAAa,SAAC,CAAxC,EACE,EAAY,EAAM,OAAO,CAAC,EAAE,CAAC,OAAO,CACpC,EAAY,EAAM,OAAO,CAAC,EAAE,CAAC,OAAO,AACtC,GAEA,SAAS,gBAAgB,CAAC,WAAY,WAkDpC,IAAM,EACA,CAEF,CAAA,KAAK,GAAG,CAHN,EAAS,EAAY,GAGJ,KAAK,GAAG,CAFzB,EAAS,EAAY,GAGrB,EAAS,EACX,EAAK,SAAS,GAEd,EAAK,QAAQ,GAGX,EAAS,EACX,EAAK,QAAQ,GAEb,EAAK,MAAM,GAIf,GAjEF,GAGA,EAAY,gBAAgB,CAAC,QAAS,WACpC,EAAK,OAAO,GACZ,IACA,EAAY,2BAA4B,SA2FR,UAA5B,EAAY,WAAW,GACzB,EAAY,WAAW,CAAG,UAC1B,EAAY,SAAS,CAAC,GAAG,CAAC,WAC1B,EAAY,SAAS,CAAC,MAAM,CAAC,SA5FjC,GAIA,SAAS,gBAAgB,CAAC,UAAW,SAAC,CAAtC,EACE,IAAI,EAAQ,CAAA,EAEZ,OAAQ,EAAM,GAAG,EACf,IAAK,YACH,EAAQ,EAAK,QAAQ,GACrB,KACF,KAAK,aACH,EAAQ,EAAK,SAAS,GACtB,KACF,KAAK,UACH,EAAQ,EAAK,MAAM,GACnB,KACF,KAAK,YACH,EAAQ,EAAK,QAAQ,EAEzB,CAEI,GACF,GAEJ,E","sources":["<anon>","src/scripts/main.js","src/modules/Game.class.js","node_modules/@swc/helpers/esm/_class_call_check.js","node_modules/@swc/helpers/esm/_create_class.js","node_modules/@swc/helpers/esm/_sliced_to_array.js","node_modules/@swc/helpers/esm/_array_with_holes.js","node_modules/@swc/helpers/esm/_iterable_to_array_limit.js","node_modules/@swc/helpers/esm/_non_iterable_rest.js","node_modules/@swc/helpers/esm/_unsupported_iterable_to_array.js","node_modules/@swc/helpers/esm/_array_like_to_array.js","node_modules/@swc/helpers/esm/_to_consumable_array.js","node_modules/@swc/helpers/esm/_array_without_holes.js","node_modules/@swc/helpers/esm/_iterable_to_array.js","node_modules/@swc/helpers/esm/_non_iterable_spread.js"],"sourcesContent":["(function () {\nvar $3d28d7f1aac198f5$exports = {};\nfunction $8713978b2328d32b$export$71511d61b312f219(instance, Constructor) {\n    if (!(instance instanceof Constructor)) throw new TypeError(\"Cannot call a class as a function\");\n}\n\n\nfunction $4fc75ccb937ab1df$var$_defineProperties(target, props) {\n    for(var i = 0; i < props.length; i++){\n        var descriptor = props[i];\n        descriptor.enumerable = descriptor.enumerable || false;\n        descriptor.configurable = true;\n        if (\"value\" in descriptor) descriptor.writable = true;\n        Object.defineProperty(target, descriptor.key, descriptor);\n    }\n}\nfunction $4fc75ccb937ab1df$export$71511d61b312f219(Constructor, protoProps, staticProps) {\n    if (protoProps) $4fc75ccb937ab1df$var$_defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) $4fc75ccb937ab1df$var$_defineProperties(Constructor, staticProps);\n    return Constructor;\n}\n\n\nfunction $09cbfe85151ea6c6$export$71511d61b312f219(arr) {\n    if (Array.isArray(arr)) return arr;\n}\n\n\nfunction $8ca2848f896a6803$export$71511d61b312f219(arr, i) {\n    var _i = arr == null ? null : typeof Symbol !== \"undefined\" && arr[Symbol.iterator] || arr[\"@@iterator\"];\n    if (_i == null) return;\n    var _arr = [];\n    var _n = true;\n    var _d = false;\n    var _s, _e;\n    try {\n        for(_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true){\n            _arr.push(_s.value);\n            if (i && _arr.length === i) break;\n        }\n    } catch (err) {\n        _d = true;\n        _e = err;\n    } finally{\n        try {\n            if (!_n && _i[\"return\"] != null) _i[\"return\"]();\n        } finally{\n            if (_d) throw _e;\n        }\n    }\n    return _arr;\n}\n\n\nfunction $a0bc1859061deae1$export$71511d61b312f219() {\n    throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\n\n\nfunction $c3b10a83b523f372$export$71511d61b312f219(arr, len) {\n    if (len == null || len > arr.length) len = arr.length;\n    for(var i = 0, arr2 = new Array(len); i < len; i++)arr2[i] = arr[i];\n    return arr2;\n}\n\n\nfunction $d4f69c5c6c4654b1$export$71511d61b312f219(o, minLen) {\n    if (!o) return;\n    if (typeof o === \"string\") return (0, $c3b10a83b523f372$export$71511d61b312f219)(o, minLen);\n    var n = Object.prototype.toString.call(o).slice(8, -1);\n    if (n === \"Object\" && o.constructor) n = o.constructor.name;\n    if (n === \"Map\" || n === \"Set\") return Array.from(n);\n    if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return (0, $c3b10a83b523f372$export$71511d61b312f219)(o, minLen);\n}\n\n\nfunction $efec029548ccee7f$export$71511d61b312f219(arr, i) {\n    return (0, $09cbfe85151ea6c6$export$71511d61b312f219)(arr) || (0, $8ca2848f896a6803$export$71511d61b312f219)(arr, i) || (0, $d4f69c5c6c4654b1$export$71511d61b312f219)(arr, i) || (0, $a0bc1859061deae1$export$71511d61b312f219)();\n}\n\n\n\nfunction $c50969dc1df61e8b$export$71511d61b312f219(arr) {\n    if (Array.isArray(arr)) return (0, $c3b10a83b523f372$export$71511d61b312f219)(arr);\n}\n\n\nfunction $09c9f293d010c0e1$export$71511d61b312f219(iter) {\n    if (typeof Symbol !== \"undefined\" && iter[Symbol.iterator] != null || iter[\"@@iterator\"] != null) return Array.from(iter);\n}\n\n\nfunction $38c2d4931cb7a7c4$export$71511d61b312f219() {\n    throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\n\n\n\nfunction $227c6742e0ff6f82$export$71511d61b312f219(arr) {\n    return (0, $c50969dc1df61e8b$export$71511d61b312f219)(arr) || (0, $09c9f293d010c0e1$export$71511d61b312f219)(arr) || (0, $d4f69c5c6c4654b1$export$71511d61b312f219)(arr) || (0, $38c2d4931cb7a7c4$export$71511d61b312f219)();\n}\n\n\nvar $3d28d7f1aac198f5$var$Game = /*#__PURE__*/ function() {\n    \"use strict\";\n    function Game() {\n        var initialState = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : [\n            [\n                0,\n                0,\n                0,\n                0\n            ],\n            [\n                0,\n                0,\n                0,\n                0\n            ],\n            [\n                0,\n                0,\n                0,\n                0\n            ],\n            [\n                0,\n                0,\n                0,\n                0\n            ]\n        ];\n        (0, $8713978b2328d32b$export$71511d61b312f219)(this, Game);\n        this.score = 0;\n        this.board = initialState;\n        this.status = \"idle\"; // 'idle', 'playing', 'win', 'lose'\n    }\n    (0, $4fc75ccb937ab1df$export$71511d61b312f219)(Game, [\n        {\n            /**\n   * Starts the game with initial random tiles.\n   */ key: \"start\",\n            value: function start() {\n                this.status = \"playing\";\n                this.addRandomTile();\n                this.addRandomTile();\n            }\n        },\n        {\n            /**\n   * Resets the game to its initial state.\n   */ key: \"restart\",\n            value: function restart() {\n                this.board = [\n                    [\n                        0,\n                        0,\n                        0,\n                        0\n                    ],\n                    [\n                        0,\n                        0,\n                        0,\n                        0\n                    ],\n                    [\n                        0,\n                        0,\n                        0,\n                        0\n                    ],\n                    [\n                        0,\n                        0,\n                        0,\n                        0\n                    ]\n                ];\n                this.score = 0;\n                this.status = \"idle\";\n                this.start();\n            }\n        },\n        {\n            /**\n   * Returns the current score.\n   * @returns {number}\n   */ key: \"getScore\",\n            value: function getScore() {\n                return this.score;\n            }\n        },\n        {\n            /**\n   * Returns the current state of the board.\n   * @returns {number[][]}\n   */ key: \"getState\",\n            value: function getState() {\n                return this.board;\n            }\n        },\n        {\n            /**\n   * Returns the current game status.\n   * @returns {string}\n   */ key: \"getStatus\",\n            value: function getStatus() {\n                return this.status;\n            }\n        },\n        {\n            /**\n   * Adds a random tile (2 or 4) to a random empty cell on the board.\n   */ key: \"addRandomTile\",\n            value: function addRandomTile() {\n                var emptyCells = [];\n                // Collect all empty cells\n                for(var row = 0; row < this.board.length; row++){\n                    for(var col = 0; col < this.board[row].length; col++)if (this.board[row][col] === 0) emptyCells.push([\n                        row,\n                        col\n                    ]);\n                }\n                if (emptyCells.length > 0) {\n                    var _emptyCells_Math_floor = (0, $efec029548ccee7f$export$71511d61b312f219)(emptyCells[Math.floor(Math.random() * emptyCells.length)], 2), row1 = _emptyCells_Math_floor[0], col1 = _emptyCells_Math_floor[1];\n                    this.board[row1][col1] = Math.random() < 0.9 ? 2 : 4;\n                }\n            }\n        },\n        {\n            /**\n   * Slides and merges tiles to the left.\n   */ key: \"moveLeft\",\n            value: function moveLeft() {\n                var moved = false;\n                for(var row = 0; row < this.board.length; row++){\n                    var newRow = this.slideAndMerge(this.board[row]);\n                    if (newRow.toString() !== this.board[row].toString()) {\n                        moved = true;\n                        this.board[row] = newRow;\n                    }\n                }\n                if (moved) this.addRandomTile();\n                return moved;\n            }\n        },\n        {\n            /**\n   * Slides and merges tiles to the right.\n   */ key: \"moveRight\",\n            value: function moveRight() {\n                var moved = false;\n                for(var row = 0; row < this.board.length; row++){\n                    var reversedRow = (0, $227c6742e0ff6f82$export$71511d61b312f219)(this.board[row]).reverse();\n                    var newRow = this.slideAndMerge(reversedRow).reverse();\n                    if (newRow.toString() !== this.board[row].toString()) {\n                        moved = true;\n                        this.board[row] = newRow;\n                    }\n                }\n                if (moved) this.addRandomTile();\n                return moved;\n            }\n        },\n        {\n            /**\n   * Slides and merges tiles upward.\n   */ key: \"moveUp\",\n            value: function moveUp() {\n                var moved = false;\n                for(var col = 0; col < 4; col++){\n                    var column = [\n                        this.board[0][col],\n                        this.board[1][col],\n                        this.board[2][col],\n                        this.board[3][col]\n                    ];\n                    var newColumn = this.slideAndMerge(column);\n                    for(var row = 0; row < 4; row++)if (this.board[row][col] !== newColumn[row]) {\n                        moved = true;\n                        this.board[row][col] = newColumn[row];\n                    }\n                }\n                if (moved) this.addRandomTile();\n                return moved;\n            }\n        },\n        {\n            /**\n   * Slides and merges tiles downward.\n   */ key: \"moveDown\",\n            value: function moveDown() {\n                var moved = false;\n                for(var col = 0; col < 4; col++){\n                    var column = [\n                        this.board[0][col],\n                        this.board[1][col],\n                        this.board[2][col],\n                        this.board[3][col]\n                    ].reverse();\n                    var newColumn = this.slideAndMerge(column).reverse();\n                    for(var row = 0; row < 4; row++)if (this.board[row][col] !== newColumn[row]) {\n                        moved = true;\n                        this.board[row][col] = newColumn[row];\n                    }\n                }\n                if (moved) this.addRandomTile();\n                return moved;\n            }\n        },\n        {\n            /**\n   * Slides and merges a row or column of tiles.\n   * @param {number[]} tiles The row or column to slide and merge.\n   * @returns {number[]} The new row or column after sliding and merging.\n   */ key: \"slideAndMerge\",\n            value: function slideAndMerge(tiles) {\n                // Filter out zeros and merge tiles\n                var filtered = tiles.filter(function(tile) {\n                    return tile !== 0;\n                });\n                for(var i = 0; i < filtered.length - 1; i++)if (filtered[i] === filtered[i + 1]) {\n                    filtered[i] *= 2;\n                    this.score += filtered[i];\n                    filtered[i + 1] = 0;\n                }\n                // Remove zeros again and pad the row/column with zeros\n                var merged = filtered.filter(function(tile) {\n                    return tile !== 0;\n                });\n                var padding = new Array(4 - merged.length).fill(0);\n                return merged.concat(padding);\n            }\n        },\n        {\n            /**\n   * Checks if the game is over (no valid moves).\n   * @returns {boolean}\n   */ key: \"checkGameOver\",\n            value: function checkGameOver() {\n                // Check if there are any empty cells\n                for(var row = 0; row < 4; row++)for(var col = 0; col < 4; col++){\n                    if (this.board[row][col] === 0) return false;\n                    // Check if adjacent tiles can be merged\n                    if (col < 3 && this.board[row][col] === this.board[row][col + 1]) return false;\n                    if (row < 3 && this.board[row][col] === this.board[row + 1][col]) return false;\n                }\n                this.status = \"lose\";\n                return true;\n            }\n        },\n        {\n            /**\n   * Checks if the game is won (a tile with value 2048 exists).\n   */ key: \"checkWinCondition\",\n            value: function checkWinCondition() {\n                for(var row = 0; row < 4; row++){\n                    for(var col = 0; col < 4; col++)if (this.board[row][col] === 2048) {\n                        this.status = \"win\";\n                        return true;\n                    }\n                }\n                return false;\n            }\n        }\n    ]);\n    return Game;\n}();\n$3d28d7f1aac198f5$exports = $3d28d7f1aac198f5$var$Game;\n\n\nvar $197cd56b15c33885$var$game = new $3d28d7f1aac198f5$exports();\n// HTML Elements\nvar $197cd56b15c33885$var$gameField = document.querySelector(\".game-field\");\nvar $197cd56b15c33885$var$scoreElement = document.querySelector(\".game-score\");\nvar $197cd56b15c33885$var$startButton = document.querySelector(\".start\");\nvar $197cd56b15c33885$var$messageContainer = document.querySelector(\".message-container\");\n// Touch Events\nvar $197cd56b15c33885$var$touchStartX = 0;\nvar $197cd56b15c33885$var$touchStartY = 0;\nvar $197cd56b15c33885$var$touchEndX = 0;\nvar $197cd56b15c33885$var$touchEndY = 0;\n// eslint-disable-next-line no-shadow\ndocument.addEventListener(\"touchstart\", function(event) {\n    $197cd56b15c33885$var$touchStartX = event.touches[0].clientX;\n    $197cd56b15c33885$var$touchStartY = event.touches[0].clientY;\n});\n// eslint-disable-next-line no-shadow\ndocument.addEventListener(\"touchmove\", function(event) {\n    $197cd56b15c33885$var$touchEndX = event.touches[0].clientX;\n    $197cd56b15c33885$var$touchEndY = event.touches[0].clientY;\n});\ndocument.addEventListener(\"touchend\", function() {\n    $197cd56b15c33885$var$handleSwipe();\n});\n/** Starts the game and initializes the board */ $197cd56b15c33885$var$startButton.addEventListener(\"click\", function() {\n    $197cd56b15c33885$var$game.restart();\n    $197cd56b15c33885$var$renderBoard();\n    $197cd56b15c33885$var$showMessage(\"Game started! Good luck!\", \"start\");\n    $197cd56b15c33885$var$toggleStartButton();\n});\n/** Listen for key events */ // eslint-disable-next-line no-shadow\ndocument.addEventListener(\"keydown\", function(event) {\n    var moved = false;\n    switch(event.key){\n        case \"ArrowLeft\":\n            moved = $197cd56b15c33885$var$game.moveLeft();\n            break;\n        case \"ArrowRight\":\n            moved = $197cd56b15c33885$var$game.moveRight();\n            break;\n        case \"ArrowUp\":\n            moved = $197cd56b15c33885$var$game.moveUp();\n            break;\n        case \"ArrowDown\":\n            moved = $197cd56b15c33885$var$game.moveDown();\n            break;\n    }\n    if (moved) $197cd56b15c33885$var$gameUpdate();\n});\nfunction $197cd56b15c33885$var$gameUpdate() {\n    $197cd56b15c33885$var$renderBoard();\n    if ($197cd56b15c33885$var$game.checkWinCondition()) $197cd56b15c33885$var$showMessage(\"\\uD83C\\uDF89 You win! Congrats!\", \"win\");\n    else if ($197cd56b15c33885$var$game.checkGameOver()) $197cd56b15c33885$var$showMessage(\"\\uD83D\\uDC80 Game Over! Restart the game?\", \"lose\");\n}\n// Swipe Events\nfunction $197cd56b15c33885$var$handleSwipe() {\n    var deltaX = $197cd56b15c33885$var$touchEndX - $197cd56b15c33885$var$touchStartX;\n    var deltaY = $197cd56b15c33885$var$touchEndY - $197cd56b15c33885$var$touchStartY;\n    if (Math.abs(deltaX) > Math.abs(deltaY)) {\n        if (deltaX > 0) $197cd56b15c33885$var$game.moveRight();\n        else $197cd56b15c33885$var$game.moveLeft();\n    } else if (deltaY > 0) $197cd56b15c33885$var$game.moveDown();\n    else $197cd56b15c33885$var$game.moveUp();\n    $197cd56b15c33885$var$gameUpdate();\n}\n/** Renders the game board based on the current state */ function $197cd56b15c33885$var$renderBoard() {\n    var state = $197cd56b15c33885$var$game.getState();\n    var rows = $197cd56b15c33885$var$gameField.querySelectorAll(\".field-row\");\n    state.forEach(function(row, rowIndex) {\n        var cells = rows[rowIndex].querySelectorAll(\".field-cell\");\n        row.forEach(function(cellValue, colIndex) {\n            var cell = cells[colIndex];\n            cell.textContent = cellValue !== 0 ? cellValue : \"\";\n            $197cd56b15c33885$var$updateCellStyle(cell, cellValue);\n        });\n    });\n    $197cd56b15c33885$var$scoreElement.textContent = $197cd56b15c33885$var$game.getScore();\n}\n/** Updates the cell style based on its value */ function $197cd56b15c33885$var$updateCellStyle(cell, value) {\n    cell.className = \"field-cell\"; // Reset class\n    if (value !== 0) cell.classList.add(\"field-cell--\".concat(value)); // Apply dynamic class\n}\nfunction $197cd56b15c33885$var$toggleStartButton() {\n    if ($197cd56b15c33885$var$startButton.textContent === \"Start\") {\n        $197cd56b15c33885$var$startButton.textContent = \"Restart\";\n        $197cd56b15c33885$var$startButton.classList.add(\"restart\");\n        $197cd56b15c33885$var$startButton.classList.remove(\"start\");\n    }\n}\n/** Shows the appropriate message based on game status */ function $197cd56b15c33885$var$showMessage(text, type) {\n    $197cd56b15c33885$var$messageContainer.querySelectorAll(\".message\").forEach(function(msg) {\n        return msg.classList.add(\"hidden\");\n    });\n    var messageElement = $197cd56b15c33885$var$messageContainer.querySelector(\".message-\".concat(type));\n    messageElement.textContent = text;\n    messageElement.classList.remove(\"hidden\");\n}\n\n})();\n//# sourceMappingURL=index.d41e3617.js.map\n","const Game = require('../modules/Game.class.js');\n\nconst game = new Game();\n\n// HTML Elements\nconst gameField = document.querySelector('.game-field');\nconst scoreElement = document.querySelector('.game-score');\nconst startButton = document.querySelector('.start');\nconst messageContainer = document.querySelector('.message-container');\n\n// Touch Events\nlet touchStartX = 0;\nlet touchStartY = 0;\nlet touchEndX = 0;\nlet touchEndY = 0;\n\n// eslint-disable-next-line no-shadow\ndocument.addEventListener('touchstart', (event) => {\n  touchStartX = event.touches[0].clientX;\n  touchStartY = event.touches[0].clientY;\n});\n\n// eslint-disable-next-line no-shadow\ndocument.addEventListener('touchmove', (event) => {\n  touchEndX = event.touches[0].clientX;\n  touchEndY = event.touches[0].clientY;\n});\n\ndocument.addEventListener('touchend', () => {\n  handleSwipe();\n});\n\n/** Starts the game and initializes the board */\nstartButton.addEventListener('click', () => {\n  game.restart();\n  renderBoard();\n  showMessage('Game started! Good luck!', 'start');\n  toggleStartButton();\n});\n\n/** Listen for key events */\n// eslint-disable-next-line no-shadow\ndocument.addEventListener('keydown', (event) => {\n  let moved = false;\n\n  switch (event.key) {\n    case 'ArrowLeft':\n      moved = game.moveLeft();\n      break;\n    case 'ArrowRight':\n      moved = game.moveRight();\n      break;\n    case 'ArrowUp':\n      moved = game.moveUp();\n      break;\n    case 'ArrowDown':\n      moved = game.moveDown();\n      break;\n  }\n\n  if (moved) {\n    gameUpdate();\n  }\n});\n\nfunction gameUpdate() {\n  renderBoard();\n\n  if (game.checkWinCondition()) {\n    showMessage('🎉 You win! Congrats!', 'win');\n  } else if (game.checkGameOver()) {\n    showMessage('💀 Game Over! Restart the game?', 'lose');\n  }\n}\n\n// Swipe Events\n\nfunction handleSwipe() {\n  const deltaX = touchEndX - touchStartX;\n  const deltaY = touchEndY - touchStartY;\n\n  if (Math.abs(deltaX) > Math.abs(deltaY)) {\n    if (deltaX > 0) {\n      game.moveRight();\n    } else {\n      game.moveLeft();\n    }\n  } else {\n    if (deltaY > 0) {\n      game.moveDown();\n    } else {\n      game.moveUp();\n    }\n  }\n\n  gameUpdate();\n}\n\n/** Renders the game board based on the current state */\nfunction renderBoard() {\n  const state = game.getState();\n  const rows = gameField.querySelectorAll('.field-row');\n\n  state.forEach((row, rowIndex) => {\n    const cells = rows[rowIndex].querySelectorAll('.field-cell');\n\n    row.forEach((cellValue, colIndex) => {\n      const cell = cells[colIndex];\n\n      cell.textContent = cellValue !== 0 ? cellValue : '';\n      updateCellStyle(cell, cellValue);\n    });\n  });\n\n  scoreElement.textContent = game.getScore();\n}\n\n/** Updates the cell style based on its value */\nfunction updateCellStyle(cell, value) {\n  cell.className = 'field-cell'; // Reset class\n\n  if (value !== 0) {\n    cell.classList.add(`field-cell--${value}`); // Apply dynamic class\n  }\n}\n\nfunction toggleStartButton() {\n  if (startButton.textContent === 'Start') {\n    startButton.textContent = 'Restart';\n    startButton.classList.add('restart');\n    startButton.classList.remove('start');\n  }\n}\n\n/** Shows the appropriate message based on game status */\nfunction showMessage(text, type) {\n  messageContainer\n    .querySelectorAll('.message')\n    .forEach((msg) => msg.classList.add('hidden'));\n\n  const messageElement = messageContainer.querySelector(`.message-${type}`);\n\n  messageElement.textContent = text;\n  messageElement.classList.remove('hidden');\n}\n","class Game {\n  /**\n   * Creates a new game instance.\n   * @param {number[][]} initialState The initial state of the board.\n   * Default: 4x4 grid filled with zeros.\n   */\n  constructor(\n    initialState = [\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n    ],\n  ) {\n    this.score = 0;\n    this.board = initialState;\n    this.status = 'idle'; // 'idle', 'playing', 'win', 'lose'\n  }\n\n  /**\n   * Starts the game with initial random tiles.\n   */\n  start() {\n    this.status = 'playing';\n    this.addRandomTile();\n    this.addRandomTile();\n  }\n\n  /**\n   * Resets the game to its initial state.\n   */\n  restart() {\n    this.board = [\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n    ];\n    this.score = 0;\n    this.status = 'idle';\n    this.start();\n  }\n\n  /**\n   * Returns the current score.\n   * @returns {number}\n   */\n  getScore() {\n    return this.score;\n  }\n\n  /**\n   * Returns the current state of the board.\n   * @returns {number[][]}\n   */\n  getState() {\n    return this.board;\n  }\n\n  /**\n   * Returns the current game status.\n   * @returns {string}\n   */\n  getStatus() {\n    return this.status;\n  }\n\n  /**\n   * Adds a random tile (2 or 4) to a random empty cell on the board.\n   */\n  addRandomTile() {\n    const emptyCells = [];\n\n    // Collect all empty cells\n    for (let row = 0; row < this.board.length; row++) {\n      for (let col = 0; col < this.board[row].length; col++) {\n        if (this.board[row][col] === 0) {\n          emptyCells.push([row, col]);\n        }\n      }\n    }\n\n    if (emptyCells.length > 0) {\n      const [row, col] =\n        emptyCells[Math.floor(Math.random() * emptyCells.length)];\n\n      this.board[row][col] = Math.random() < 0.9 ? 2 : 4;\n    }\n  }\n\n  /**\n   * Slides and merges tiles to the left.\n   */\n  moveLeft() {\n    let moved = false;\n\n    for (let row = 0; row < this.board.length; row++) {\n      const newRow = this.slideAndMerge(this.board[row]);\n\n      if (newRow.toString() !== this.board[row].toString()) {\n        moved = true;\n        this.board[row] = newRow;\n      }\n    }\n\n    if (moved) {\n      this.addRandomTile();\n    }\n\n    return moved;\n  }\n\n  /**\n   * Slides and merges tiles to the right.\n   */\n  moveRight() {\n    let moved = false;\n\n    for (let row = 0; row < this.board.length; row++) {\n      const reversedRow = [...this.board[row]].reverse();\n      const newRow = this.slideAndMerge(reversedRow).reverse();\n\n      if (newRow.toString() !== this.board[row].toString()) {\n        moved = true;\n        this.board[row] = newRow;\n      }\n    }\n\n    if (moved) {\n      this.addRandomTile();\n    }\n\n    return moved;\n  }\n\n  /**\n   * Slides and merges tiles upward.\n   */\n  moveUp() {\n    let moved = false;\n\n    for (let col = 0; col < 4; col++) {\n      const column = [\n        this.board[0][col],\n        this.board[1][col],\n        this.board[2][col],\n        this.board[3][col],\n      ];\n      const newColumn = this.slideAndMerge(column);\n\n      for (let row = 0; row < 4; row++) {\n        if (this.board[row][col] !== newColumn[row]) {\n          moved = true;\n          this.board[row][col] = newColumn[row];\n        }\n      }\n    }\n\n    if (moved) {\n      this.addRandomTile();\n    }\n\n    return moved;\n  }\n\n  /**\n   * Slides and merges tiles downward.\n   */\n  moveDown() {\n    let moved = false;\n\n    for (let col = 0; col < 4; col++) {\n      const column = [\n        this.board[0][col],\n        this.board[1][col],\n        this.board[2][col],\n        this.board[3][col],\n      ].reverse();\n      const newColumn = this.slideAndMerge(column).reverse();\n\n      for (let row = 0; row < 4; row++) {\n        if (this.board[row][col] !== newColumn[row]) {\n          moved = true;\n          this.board[row][col] = newColumn[row];\n        }\n      }\n    }\n\n    if (moved) {\n      this.addRandomTile();\n    }\n\n    return moved;\n  }\n\n  /**\n   * Slides and merges a row or column of tiles.\n   * @param {number[]} tiles The row or column to slide and merge.\n   * @returns {number[]} The new row or column after sliding and merging.\n   */\n  slideAndMerge(tiles) {\n    // Filter out zeros and merge tiles\n    const filtered = tiles.filter((tile) => tile !== 0);\n\n    for (let i = 0; i < filtered.length - 1; i++) {\n      if (filtered[i] === filtered[i + 1]) {\n        filtered[i] *= 2;\n        this.score += filtered[i];\n        filtered[i + 1] = 0;\n      }\n    }\n\n    // Remove zeros again and pad the row/column with zeros\n    const merged = filtered.filter((tile) => tile !== 0);\n    const padding = new Array(4 - merged.length).fill(0);\n\n    return merged.concat(padding);\n  }\n\n  /**\n   * Checks if the game is over (no valid moves).\n   * @returns {boolean}\n   */\n  checkGameOver() {\n    // Check if there are any empty cells\n    for (let row = 0; row < 4; row++) {\n      for (let col = 0; col < 4; col++) {\n        if (this.board[row][col] === 0) {\n          return false;\n        }\n\n        // Check if adjacent tiles can be merged\n        if (col < 3 && this.board[row][col] === this.board[row][col + 1]) {\n          return false;\n        }\n\n        if (row < 3 && this.board[row][col] === this.board[row + 1][col]) {\n          return false;\n        }\n      }\n    }\n    this.status = 'lose';\n\n    return true;\n  }\n\n  /**\n   * Checks if the game is won (a tile with value 2048 exists).\n   */\n  checkWinCondition() {\n    for (let row = 0; row < 4; row++) {\n      for (let col = 0; col < 4; col++) {\n        if (this.board[row][col] === 2048) {\n          this.status = 'win';\n\n          return true;\n        }\n      }\n    }\n\n    return false;\n  }\n}\n\nmodule.exports = Game;\n","function _class_call_check(instance, Constructor) {\n    if (!(instance instanceof Constructor)) throw new TypeError(\"Cannot call a class as a function\");\n}\nexport { _class_call_check as _ };\n","function _defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n        var descriptor = props[i];\n        descriptor.enumerable = descriptor.enumerable || false;\n        descriptor.configurable = true;\n\n        if (\"value\" in descriptor) descriptor.writable = true;\n\n        Object.defineProperty(target, descriptor.key, descriptor);\n    }\n}\nfunction _create_class(Constructor, protoProps, staticProps) {\n    if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) _defineProperties(Constructor, staticProps);\n\n    return Constructor;\n}\nexport { _create_class as _ };\n","import { _ as _array_with_holes } from \"./_array_with_holes.js\";\nimport { _ as _iterable_to_array_limit } from \"./_iterable_to_array_limit.js\";\nimport { _ as _non_iterable_rest } from \"./_non_iterable_rest.js\";\nimport { _ as _unsupported_iterable_to_array } from \"./_unsupported_iterable_to_array.js\";\n\nfunction _sliced_to_array(arr, i) {\n    return _array_with_holes(arr) || _iterable_to_array_limit(arr, i) || _unsupported_iterable_to_array(arr, i) || _non_iterable_rest();\n}\nexport { _sliced_to_array as _ };\n","function _array_with_holes(arr) {\n    if (Array.isArray(arr)) return arr;\n}\nexport { _array_with_holes as _ };\n","function _iterable_to_array_limit(arr, i) {\n    var _i = arr == null ? null : typeof Symbol !== \"undefined\" && arr[Symbol.iterator] || arr[\"@@iterator\"];\n\n    if (_i == null) return;\n\n    var _arr = [];\n    var _n = true;\n    var _d = false;\n    var _s, _e;\n\n    try {\n        for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) {\n            _arr.push(_s.value);\n            if (i && _arr.length === i) break;\n        }\n    } catch (err) {\n        _d = true;\n        _e = err;\n    } finally {\n        try {\n            if (!_n && _i[\"return\"] != null) _i[\"return\"]();\n        } finally {\n            if (_d) throw _e;\n        }\n    }\n\n    return _arr;\n}\nexport { _iterable_to_array_limit as _ };\n","function _non_iterable_rest() {\n    throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\nexport { _non_iterable_rest as _ };\n","import { _ as _array_like_to_array } from \"./_array_like_to_array.js\";\n\nfunction _unsupported_iterable_to_array(o, minLen) {\n    if (!o) return;\n    if (typeof o === \"string\") return _array_like_to_array(o, minLen);\n\n    var n = Object.prototype.toString.call(o).slice(8, -1);\n\n    if (n === \"Object\" && o.constructor) n = o.constructor.name;\n    if (n === \"Map\" || n === \"Set\") return Array.from(n);\n    if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _array_like_to_array(o, minLen);\n}\nexport { _unsupported_iterable_to_array as _ };\n","function _array_like_to_array(arr, len) {\n    if (len == null || len > arr.length) len = arr.length;\n\n    for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i];\n\n    return arr2;\n}\nexport { _array_like_to_array as _ };\n","import { _ as _array_without_holes } from \"./_array_without_holes.js\";\nimport { _ as _iterable_to_array } from \"./_iterable_to_array.js\";\nimport { _ as _non_iterable_spread } from \"./_non_iterable_spread.js\";\nimport { _ as _unsupported_iterable_to_array } from \"./_unsupported_iterable_to_array.js\";\n\nfunction _to_consumable_array(arr) {\n    return _array_without_holes(arr) || _iterable_to_array(arr) || _unsupported_iterable_to_array(arr) || _non_iterable_spread();\n}\nexport { _to_consumable_array as _ };\n","import { _ as _array_like_to_array } from \"./_array_like_to_array.js\";\n\nfunction _array_without_holes(arr) {\n    if (Array.isArray(arr)) return _array_like_to_array(arr);\n}\nexport { _array_without_holes as _ };\n","function _iterable_to_array(iter) {\n    if (typeof Symbol !== \"undefined\" && iter[Symbol.iterator] != null || iter[\"@@iterator\"] != null) {\n        return Array.from(iter);\n    }\n}\nexport { _iterable_to_array as _ };\n","function _non_iterable_spread() {\n    throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\nexport { _non_iterable_spread as _ };\n"],"names":["$c3b10a83b523f372$export$71511d61b312f219","arr","len","length","i","arr2","Array","$d4f69c5c6c4654b1$export$71511d61b312f219","o","minLen","n","Object","prototype","toString","call","slice","constructor","name","from","test","$197cd56b15c33885$var$game","protoProps","Game","initialState","arguments","instance","Constructor","TypeError","score","board","status","key","value","addRandomTile","start","emptyCells","row","col","push","_emptyCells_Math_floor","isArray","Math","floor","random","_s","_e","_i","Symbol","iterator","_arr","_n","_d","next","done","err","row1","col1","moved","newRow","slideAndMerge","reversedRow","iter","reverse","column","newColumn","tiles","filtered","filter","tile","merged","padding","fill","concat","$4fc75ccb937ab1df$var$_defineProperties","target","props","descriptor","enumerable","configurable","writable","defineProperty","$197cd56b15c33885$var$gameField","document","querySelector","$197cd56b15c33885$var$scoreElement","$197cd56b15c33885$var$startButton","$197cd56b15c33885$var$messageContainer","$197cd56b15c33885$var$touchStartX","$197cd56b15c33885$var$touchStartY","$197cd56b15c33885$var$touchEndX","$197cd56b15c33885$var$touchEndY","$197cd56b15c33885$var$gameUpdate","$197cd56b15c33885$var$renderBoard","checkWinCondition","$197cd56b15c33885$var$showMessage","checkGameOver","state","getState","rows","querySelectorAll","forEach","rowIndex","cells","cellValue","colIndex","cell","textContent","className","classList","add","getScore","text","type","msg","messageElement","remove","addEventListener","event","touches","clientX","clientY","deltaX","deltaY","abs","moveRight","moveLeft","moveDown","moveUp","restart"],"version":3,"file":"index.d41e3617.js.map"}